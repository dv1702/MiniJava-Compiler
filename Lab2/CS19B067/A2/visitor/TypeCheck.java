//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import javax.swing.text.DefaultStyledDocument.ElementSpec;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TypeCheck<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   HashMap<String, SymbolTable> table;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      table = (HashMap<String, SymbolTable>)argu;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // get main class name 
      String mainClass = (String)n.f1.accept(this, argu);
      //System.out.println(mainClass);
      // fetch Symbol table for main class
      SymbolTable mainTable = table.get(mainClass);
      // main methodinfo intialisation
      MethodInfo mainMethod = mainTable.method.get("main");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, (A)mainMethod);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // create SymbolTable for class
      String className = (String)n.f1.accept(this, argu);
      SymbolTable classTable = table.get(className);
      //classTable.print();
      n.f2.accept(this, argu);
      String classType  = "";
      n.f3.accept(this, (A)classTable);
      n.f4.accept(this, (A)classTable);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      String parentClass = (String)n.f3.accept(this, argu);
      SymbolTable classTable = table.get(className);
      //classTable.print();
      n.f4.accept(this, argu);
      n.f5.accept(this, (A)classTable);
      n.f6.accept(this, (A)classTable);
      n.f7.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String lol = "";
      n.f0.accept(this, (A)lol);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      SymbolTable classTable = (SymbolTable)argu;
      n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      String id = (String)n.f2.accept(this, argu);
      //System.out.println(id);
      MethodInfo method = classTable.method.get(id);
      //System.out.println(id);
      // Find method with different info
      while(classTable.parentClass != null){
         if(classTable.method.containsKey(id)){
            //System.out.println(classTable.className);
            if(!classTable.method.get(id).equals(method)){
               System.out.println("Type error");
               System.exit(0);
            }
         }
         classTable = table.get(classTable.parentClass);
      }
      if(classTable.method.containsKey(id)){
         if(!classTable.method.get(id).equals(method)){
            System.out.println("Type error");
            System.exit(0);
         }
      }
      String methodType ="";
      n.f3.accept(this, argu);
      n.f4.accept(this, (A)method);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, (A)method);
      n.f8.accept(this, (A)method);
      n.f9.accept(this, argu);
      String returnExpressionType = (String)n.f10.accept(this, (A)method);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      if(!(returnExpressionType.equals(method.returnType))){
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String lol ="";
      n.f0.accept(this, (A)lol);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      String type = (String)n.f0.accept(this, argu);
      return (R)type;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String leftType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      //System.out.println(leftType);
      String rightType = (String)n.f2.accept(this, argu);
      //System.out.println(leftType + " = " + rightType);
      n.f3.accept(this, argu);
      // Incomplete Code
      if(!(leftType.equals(rightType)))
      {
         if(!table.containsKey(leftType) || !table.containsKey(rightType)){
            System.out.println("Type error");
            System.exit(0);
         }
         rightType = table.get(rightType).parentClass;
         while(rightType != null)
         {
            if(leftType.equals(rightType)){
               return _ret;
            }
            rightType = table.get(rightType).parentClass;
         }
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String arrayType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String indexType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String rightType = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!(arrayType.equals("int[]")) || !(indexType.equals("int") || !(rightType.equals("int")))){
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String conditionType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(!(conditionType.equals("boolean"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String conditionType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(!(conditionType.equals("boolean"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String conditionType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!(conditionType.equals("boolean"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expressionType = (String)n.f2.accept(this, argu);
      if(expressionType != "int"){
         System.out.println("Type error");
         System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String expressionType = (String)n.f0.accept(this, argu);
      MethodInfo method = (MethodInfo)argu;
      return (R)expressionType;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String firstExpressionType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String secondExpressionType = (String)n.f2.accept(this, argu);
      if(!(firstExpressionType.equals("boolean")) || !(secondExpressionType.equals("boolean"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String firstExpressionType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String secondExpressionType = (String)n.f2.accept(this, argu);
      if(!(firstExpressionType.equals("boolean")) || !(secondExpressionType.equals("boolean"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String firstExpressionType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String secondExpressionType = (String)n.f2.accept(this, argu);
      if(!(firstExpressionType.equals("int")) || !(secondExpressionType.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String firstExpressionType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String secondExpressionType = (String)n.f2.accept(this, argu);
      if(!(firstExpressionType.equals(secondExpressionType))){
         if(!(table.containsKey(firstExpressionType)) || !(table.containsKey(secondExpressionType))){
            System.out.println("Type error");
            System.exit(0);
         }
         while(secondExpressionType != null)
         {
            if(secondExpressionType.equals(firstExpressionType)){
               return (R)"boolean";
            }
            secondExpressionType = table.get(secondExpressionType).parentClass;
         }
         secondExpressionType = (String)n.f2.accept(this, argu);
         while(firstExpressionType != null)
         {
            if(firstExpressionType.equals(secondExpressionType)){
               return (R)"boolean";
            }
            firstExpressionType = table.get(firstExpressionType).parentClass;
         } 

         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String firstExpressionType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String secondExpressionType = (String)n.f2.accept(this, argu);
      if(!(firstExpressionType.equals("int")) || !(secondExpressionType.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String firstExpressionType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String secondExpressionType = (String)n.f2.accept(this, argu);
      if(!(firstExpressionType.equals("int")) || !(secondExpressionType.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String firstExpressionType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String secondExpressionType = (String)n.f2.accept(this, argu);
      if(!(firstExpressionType.equals("int")) || !(secondExpressionType.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String firstExpressionType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String secondExpressionType = (String)n.f2.accept(this, argu);
      if(!(firstExpressionType.equals("int")) || !(secondExpressionType.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String arrayType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String indexType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!(arrayType.equals("int[]")) || !(indexType.equals("int"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String firstExpressionType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(!(firstExpressionType.equals("int[]"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      MethodInfo method = (MethodInfo)argu;

      String variableType = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      //System.out.println("class: " + variableType);
      SymbolTable classTable = table.get(variableType);
      String function = (String)n.f2.accept(this, (A)(classTable));
      //System.out.println(function);
      String className = variableType;
      MethodInfo functionCall = null;
      while(className != null ){
         if(table.get(className).method.containsKey(function)){
            functionCall = table.get(className).method.get(function);
            break;
         }
         className = table.get(className).parentClass;
      }
      if(className == null){
         System.out.println("Type error");
         System.exit(0);
      }
      //System.out.println("lol");
      n.f3.accept(this, argu);// func { root.index}
      functionCall.totalCovered = 0;
      if(!method.parentClass.equals(variableType)){
      if(method.callingMethodClass != null){
         functionCall.callingMethodClass = method.callingMethodClass;
         functionCall.callingMethod = method.callingMethod;
      }
      else{
         functionCall.callingMethodClass = method.parentClass;
         functionCall.callingMethod = method.name;
      }
      }
      else{
         if(functionCall.name.equals(method.name)){
            functionCall.callingMethod = functionCall.callingMethod;
            functionCall.callingMethodClass = functionCall.callingMethodClass;
         }
         else{
            functionCall.callingMethod = method.name;
            functionCall.callingMethodClass = method.parentClass;
         }
      }
      //System.out.println(functionCall.callingMethodClass);
      n.f4.accept(this, (A)functionCall);
      if(functionCall.signature.size() != functionCall.totalCovered){
         System.out.println("Type error");
         System.exit(0);
      }
      functionCall.totalCovered = 0;
      functionCall.callingMethodClass = null;
      functionCall.callingMethod = null;
      if(functionCall.parentClass.equals(method.parentClass))
      {
         return (R)functionCall.returnType;
      }
      else if(functionCall.accessType.equals("private")){
         System.out.println("Type error");
         System.exit(0);
      }
      else if(functionCall.accessType.equals("public")){
         return (R)functionCall.returnType;
      }
      else{
         className = method.parentClass;
         while(className != null)
         {
            if(className.equals(functionCall.parentClass)){
               return (R)functionCall.returnType;
            }
            className = table.get(className).parentClass;
         }
         System.out.println("Type error");
         System.exit(0);
      }
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String conditionType = (String)n.f0.accept(this, argu);
      if(!(conditionType.equals("boolean"))){
         System.out.println("Type error");
         System.exit(0);
      }
      n.f1.accept(this, argu);
      String firstExpressionType = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String secondExpressionType = (String)n.f4.accept(this, argu);

      if(!(firstExpressionType.equals(secondExpressionType))){
         if(!(table.containsKey(firstExpressionType)) || !(table.containsKey(secondExpressionType))){
            System.out.println("Type error");
            System.exit(0);
         }
         String secondStart = secondExpressionType;

         while(firstExpressionType != null){
            secondExpressionType = secondStart;
            while(secondExpressionType != null){
               if(firstExpressionType.equals(secondExpressionType)){
                  return (R)firstExpressionType;
               }
               secondExpressionType = table.get(secondExpressionType).parentClass;
            }
            firstExpressionType = table.get(firstExpressionType).parentClass;
         }

         System.out.println("Type error");
         System.exit(0);
      }
      else{
         return (R)firstExpressionType;
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      MethodInfo method = (MethodInfo)argu;
      if(method.totalCovered == method.signature.size()){
         System.out.println("Type error");
         System.exit(0);
      }
      String expressionType = (String)n.f0.accept(this, argu);
      //System.out.println(expressionType);
      if(!expressionType.equals(method.signature.get(method.totalCovered).type)){
         System.out.println("Type error");
         System.exit(0);
      }
      else{
         method.totalCovered++;
      }
      n.f1.accept(this, (A)method);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      MethodInfo method = (MethodInfo)argu;
      n.f0.accept(this, argu);
      if(method.totalCovered == method.signature.size()){
         System.out.println("Type error");
         System.exit(0);
      }
      String expressionType = (String)n.f1.accept(this, argu);
      if(!expressionType.equals(method.signature.get(method.totalCovered).type)){
         System.out.println("Type error");
         System.exit(0);
      }
      else{
         method.totalCovered++;
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String primaryExpressionType = (String)n.f0.accept(this, argu);
      return (R)primaryExpressionType;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = n.f0.toString();
      if(argu instanceof HashMap<?, ?>){
         return (R)id;
      }
      else if(argu instanceof String){
         //System.out.println(id);
         if(!table.containsKey(id)){
            System.out.println("Type error");
            System.exit(0);
         }
         return (R)id;
      }
      else if(argu instanceof SymbolTable){
         return (R)id;
      }
      else if(argu instanceof MethodInfo){
         MethodInfo method = (MethodInfo)argu;
         String className;
         
         if(method.callingMethodClass != null){
            method = table.get(method.callingMethodClass).method.get(method.callingMethod);
         }
         else if(method.callingMethod != null ){
            method = table.get(method.parentClass).method.get(method.callingMethod);
         }
         if(method.localVariable.containsKey(id)){
            return (R)method.localVariable.get(id);
         }
         for(ParameterInfo s : method.signature){
            if(s.identifier.equals(id)){
               return (R)s.type;
            }
         }
         className = method.parentClass;
         while(className != null){
            if(table.get(className).fieldVariable.containsKey(id)){
               return (R)table.get(className).fieldVariable.get(id);
            }
            className = table.get(className).parentClass;
         }
         if(table.containsKey(id)){
            return (R)id;
         }
         //System.out.println(id);
         System.out.println("Type error");
         System.exit(0);
      }

      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      MethodInfo method = (MethodInfo)argu;
      if(method.callingMethod == null){
         return (R)method.parentClass;
      }
      n.f0.accept(this, argu);
      return (R)method.callingMethodClass;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String sizeType = (String)n.f3.accept(this, argu);
      if(!sizeType.equals("int")){
         System.out.println("Type error");
         System.exit(0);
      }
      n.f4.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String lol ="";
      String classType = (String)n.f1.accept(this, (A)lol);
      //System.out.println(classType);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R)classType;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String expressionType = (String)n.f1.accept(this, argu);
      if(!(expressionType.equals("boolean"))){
         System.out.println("Type error");
         System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String expressionType = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)expressionType;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      MethodInfo method = (MethodInfo)argu;
      if(method.totalCovered == method.signature.size()){
         System.out.println("Type error");
         System.exit(0);
      }
      String identifierType = (String)n.f0.accept(this, argu);

      if(!identifierType.equals(method.signature.get(method.totalCovered).type)){
         System.out.println("Type error");
         System.exit(0);
      }
      else{
         method.totalCovered++;
      }
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      MethodInfo method = (MethodInfo)argu;
      n.f0.accept(this, argu);
      if(method.totalCovered == method.signature.size()){
         System.out.println("Type error");
         System.exit(0);
      }
      String identifierType = (String)n.f1.accept(this, argu);

      if(!identifierType.equals(method.signature.get(method.totalCovered).type)){
            System.out.println("Type error");
            System.exit(0);
      }
      else{
         method.totalCovered++;
      }
      return _ret;
   }

}
