//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   int IS_REG     = 0;
   int IS_INTEGER = 1;
   int IS_LABEL   = 2;
   int args_count;
   int spill_count;
   int max_call_count;
   boolean is_label = false;

   class SimpleExpression{
      public String register;
      public int whichExpression;
      SimpleExpression(){}
      SimpleExpression(int whichExpr){
         this.whichExpression = whichExpr;
      }
   }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
         return n.node.accept(this,argu);
      }
      else{
         return null;
      }
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("    .text");
      System.out.println("    .globl           main");
      System.out.println("main:");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      args_count = Integer.parseInt((String)n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      spill_count = Integer.parseInt((String)n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      max_call_count = Integer.parseInt((String)n.f8.accept(this, argu));

      int stack_size = (spill_count+2)*4;
      System.out.println("   move $fp, $sp");
      System.out.println("   subu $sp, $sp, " + stack_size);
      System.out.println("   sw $ra, -4($fp)");
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      System.out.println("   lw $ra, -4($fp)");
      System.out.println("   addu $sp, $sp, " + stack_size);
      n.f11.accept(this, argu);
      System.out.println("   jal _exitret\n\n");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);

System.out.println("      .text"); 
System.out.println("      .globl _halloc"); 
System.out.println("  _halloc:"); 
System.out.println("      li $v0, 9"); 
System.out.println("      syscall"); 
System.out.println("      jr $ra"); 
System.out.println("\n\n"); 
System.out.println("      .text ");
System.out.println("      .globl _error"); 
System.out.println("  _error: ");
System.out.println("      li $v0, 4");
System.out.println("      syscall");
System.out.println("      li $v0, 10");
System.out.println("      syscall");
System.out.println("\n\n"); 
System.out.println("      .text ");
System.out.println("      .globl _print"); 
System.out.println("  _print:"); 
System.out.println("      li $v0, 1"); 
System.out.println("      syscall"); 
System.out.println("      la $a0, newline"); 
System.out.println("      li $v0, 4"); 
System.out.println("      syscall"); 
System.out.println("      jr $ra"); 
System.out.println("\n\n"); 
System.out.println("      .text ");
System.out.println("      .globl _exitret"); 
System.out.println("  _exitret:"); 
System.out.println("      li $v0, 10");
System.out.println("      syscall"); 
System.out.println("      .data");
System.out.println("      .align 0");
System.out.println("  newline: 	.asciiz \"\\n\"");
System.out.println(""); 
System.out.println("      .data");
System.out.println("      .align 0");
System.out.println(" error_msg:	.asciiz \" ERROR : Abnormally terminated!\\n \"");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      is_label = true;
      n.f0.accept(this, argu);
      is_label = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String method = (String)n.f0.accept(this, argu);
      System.out.println("    .text");
      System.out.println("    .globl           "+method);
      System.out.println(method+":");
      n.f1.accept(this, argu);
      args_count = Integer.parseInt((String)n.f2.accept(this, argu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      spill_count = Integer.parseInt((String)n.f5.accept(this, argu));
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      max_call_count = Integer.parseInt((String)n.f8.accept(this, argu));

      int stack_size = (spill_count+2)*4;
      System.out.println("   sw $fp, -8($sp)");
      System.out.println("   move $fp, $sp");
      System.out.println("   subu $sp, $sp, " + stack_size);
      System.out.println("   sw $ra, -4($fp)");
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      System.out.println("   lw $ra, -4($fp)");
      System.out.println("   lw $fp, "+ (stack_size-8)+"($sp)");
      System.out.println("   addu $sp, $sp, " + stack_size);
      System.out.println("   jr $ra\n\n");
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;  
      boolean previous_label = is_label;
      is_label = false;
      n.f0.accept(this, argu);
      is_label = previous_label;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("   nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("   jal _error");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String jump = (String)n.f2.accept(this, argu);
      System.out.println("   bne $"+reg+" ,1 , "+jump);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String jump = (String)n.f1.accept(this, argu);
      System.out.println("   b "+jump);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String base = (String)n.f1.accept(this, argu);
      String offset = (String)n.f2.accept(this, argu);
      String val = (String)n.f3.accept(this, argu);
      System.out.println("   sw $"+val+", "+offset+"($"+base+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String val = (String)n.f1.accept(this, argu);
      String base = (String)n.f2.accept(this, argu);
      String offset = (String)n.f3.accept(this, argu);
      System.out.println("   lw $"+val+", "+offset+"($"+base+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      n.f2.accept(this, (A)reg);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      SimpleExpression expr = (SimpleExpression)n.f1.accept(this, argu);
      if(expr.whichExpression == IS_REG){
         System.out.println("   move $a0 $"+expr.register);
      }
      else if(expr.whichExpression == IS_INTEGER){
         System.out.println("   li $a0 "+expr.register);
      }
      else if(expr.whichExpression == IS_LABEL){
         System.out.println("   la $a0 "+expr.register);
      }
      System.out.println("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg = (String)n.f1.accept(this, argu);
      String spilledArg = (String)n.f2.accept(this, argu);
      System.out.println("   lw $"+reg+", "+spilledArg);
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String spilledArg = (String)n.f1.accept(this, argu);
      String reg = (String)n.f2.accept(this, argu);
      System.out.println("   sw $"+reg+", "+spilledArg);
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int offset = Integer.parseInt((String)n.f1.accept(this, argu));
      String reg = (String)n.f2.accept(this, argu);
      offset *= 4;
      offset += 8;
      offset *= (-1);
      System.out.println("   sw $"+reg+", "+(offset)+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      SimpleExpression expr = (SimpleExpression)n.f1.accept(this, argu);
      if(expr.whichExpression == IS_REG){
         System.out.println("   jalr $"+expr.register);
      }
      else if(expr.whichExpression == IS_LABEL){
         System.out.println("   jal $"+expr.register);
      }
      else{
         System.out.println("   li $v1 "+expr.register);
         System.out.println("   jal $v1");
      }
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      String reg = (String)argu;
      SimpleExpression expr = (SimpleExpression)n.f0.accept(this, argu);
      if(expr.whichExpression != -1){
         if(expr.whichExpression == IS_REG){
            System.out.println("   move $"+reg+" $"+expr.register);
         }
         else if(expr.whichExpression == IS_INTEGER){
            System.out.println("   li $"+reg+" "+expr.register);
         }
         else if(expr.whichExpression == IS_LABEL){
            System.out.println("   la $"+reg+" "+expr.register);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      String reg = (String)argu;
      n.f0.accept(this, argu);
      SimpleExpression expr = (SimpleExpression)n.f1.accept(this, argu);
      if(expr.whichExpression == IS_INTEGER){
         System.out.println("   li + $a0 "+expr.register);
      }
      else if(expr.whichExpression == IS_REG){
         System.out.println("   move $a0 $"+expr.register);
      }
      System.out.println("   jal _halloc");
      System.out.println("   move $"+reg+" $v0");
      return (R)(new SimpleExpression(-1));
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String reg1 = (String)argu;
      String operation = (String)n.f0.accept(this, argu);
      String reg2 = (String)n.f1.accept(this, argu);
      SimpleExpression simpleExpr = (SimpleExpression)n.f2.accept(this, argu);
      if(simpleExpr.whichExpression == IS_REG){
         System.out.println("   "+operation+" $"+reg1+", $"+reg2+",$"+simpleExpr.register);
      }
      else if(simpleExpr.whichExpression == IS_INTEGER){
         System.out.println("   "+operation+" $"+reg1+", $"+reg2+", "+simpleExpr.register);
      }
      else if(simpleExpr.whichExpression == IS_LABEL){
         System.out.println("   "+operation+" $"+reg1+", $"+reg2+", "+simpleExpr.register);
      }
      return (R)(new SimpleExpression(-1));
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String operation = n.f0.choice.toString();
      if(operation == "LE"){
         return (R)"sle ";
      }
      else if (operation == "NE"){
         return (R)"sne ";
      }
      else if (operation == "PLUS"){
         return (R)"add ";
      }
      else if (operation == "MINUS"){
         return (R)"sub ";
      }
      else if (operation == "TIMES"){
         return (R)"mul ";
      }
      else if (operation == "DIV"){
         return (R)"div ";     
      }
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      int offset = Integer.parseInt((String)n.f1.accept(this, argu));
      int arg = args_count;
      if(arg < 4){
         arg = 0;
      }
      else {
         arg -= 4;
      }

      offset = offset + 2 + arg  + 1;
      offset *= 4;
      offset = -offset;
      return (R)(" "+offset+"($fp)");
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      SimpleExpression simpleExp = new SimpleExpression();
      simpleExp.register = (String)n.f0.accept(this, argu);
      simpleExp.whichExpression = n.f0.which;
      return (R)simpleExp;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.choice.toString();
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = n.f0.toString();
      if(is_label){
         System.out.println(id + ":");
      }
      return (R)id;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
